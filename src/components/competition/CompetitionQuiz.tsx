import React, { useState, useEffect, useCallback } from 'react';
import { useCompetitionStore } from '../../store/useCompetitionStore';
import { useAuthStore } from '../../store/useAuthStore';
import { Button } from '../ui/Button';
import { Card, CardBody } from '../ui/Card';
import { 
  Clock, Users, Trophy, Target, Zap, 
  CheckCircle, ArrowRight, Crown, Timer,
  Activity, Star, Award, TrendingUp,
  Brain, Eye, EyeOff, XCircle, MessageCircle,
  Send, Sparkles, Volume2, VolumeX, ArrowLeft,
  LogOut, AlertTriangle
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Competition } from '../../types/competition';
import { Question } from '../../types';
import { speechService } from '../../services/speech';
import { supabase } from '../../services/supabase';
import QuizQuestion from '../quiz/QuizQuestion'; 


interface CompetitionQuizProps {
  competition: Competition;
  onComplete: () => void;
  onLeave?: () => void;
}

const CompetitionQuiz: React.FC<CompetitionQuizProps> = ({
  competition,
  onComplete,
  onLeave
}) => {
  const { user } = useAuthStore();
  const { 
    participants, 
    updateParticipantProgress,
    completeCompetition,
    subscribeToCompetition,
    getLiveLeaderboard,
    chatMessages,
    loadChatMessages,
    sendChatMessage,
    subscribeToChat,
    loadParticipants,
    leaveCompetition
  } = useCompetitionStore();

  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [timeLeft, setTimeLeft] = useState<number>(
    parseInt(competition.quiz_preferences?.timeLimit || '30')
  );
  const [totalTimeElapsed, setTotalTimeElapsed] = useState(0);
  const [score, setScore] = useState(0);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [startTime] = useState(Date.now());
  const [questionStartTime, setQuestionStartTime] = useState(Date.now());
  const [showLeaderboard, setShowLeaderboard] = useState(true);
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [showChat, setShowChat] = useState(false);
  const [chatMessage, setChatMessage] = useState('');
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isQuizCompleted, setIsQuizCompleted] = useState(false);
  const [showLeaveConfirm, setShowLeaveConfirm] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Get questions from competition object (pre-generated by creator)
  const questions: Question[] = competition.questions || [];
  const currentQuestion = questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === questions.length - 1;
  const joinedParticipants = participants.filter(p => p.status === 'joined' || p.status === 'completed');
  const leaderboard = getLiveLeaderboard(competition.id);
  const isCreator = user?.id === competition.creator_id;

  // Load participants and set up subscriptions
  useEffect(() => {
    if (competition.id) {
      console.log('Setting up quiz subscriptions for competition:', competition.id);
      loadParticipants(competition.id);
      const unsubscribe = subscribeToCompetition(competition.id);
      const unsubscribeChat = subscribeToChat(competition.id);
      loadChatMessages(competition.id);
      
      return () => {
        console.log('Cleaning up quiz subscriptions');
        unsubscribe();
        unsubscribeChat();
      };
    }
  }, [competition.id, loadParticipants, subscribeToCompetition, subscribeToChat, loadChatMessages]);

  // Refresh participants periodically
  useEffect(() => {
    const interval = setInterval(() => {
      if (!isQuizCompleted) {
        loadParticipants(competition.id);
      }
    }, 2000);

    return () => clearInterval(interval);
  }, [competition.id, loadParticipants, isQuizCompleted]);

  useEffect(() => {
    setQuestionStartTime(Date.now());
    setTimeLeft(parseInt(competition.quiz_preferences?.timeLimit || '30'));
    setSelectedAnswer(answers[currentQuestion?.id] || '');
  }, [currentQuestionIndex, currentQuestion]);

  // Per-question timer
  useEffect(() => {
    if (timeLeft > 0 && questions.length > 0 && competition.quiz_preferences?.timeLimitEnabled && !isQuizCompleted) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && questions.length > 0 && competition.quiz_preferences?.timeLimitEnabled && !isQuizCompleted) {
      handleNextQuestion();
    }
  }, [timeLeft, questions.length, isQuizCompleted]);

  // Total time elapsed timer
  useEffect(() => {
    if (questions.length > 0 && !isQuizCompleted) {
      const timer = setInterval(() => {
        setTotalTimeElapsed(Math.floor((Date.now() - startTime) / 1000));
      }, 1000);
      return () => clearInterval(timer);
    }
  }, [startTime, questions.length, isQuizCompleted]);

  const calculateScore = useCallback((questionId: number, userAnswer: string) => {
    const question = questions.find(q => q.id === questionId);
    if (!question) return false;

    let isCorrect = false;
    
    switch (question.type) {
      case 'multiple-choice':
      case 'true-false':
        isCorrect = userAnswer && question.correctAnswer && 
                   userAnswer.toLowerCase() === question.correctAnswer.toLowerCase();
        break;
      case 'multi-select':
        if (userAnswer && question.correctOptions) {
          const userOptions = userAnswer.split(',').sort();
          const correctOptions = question.correctOptions.sort();
          isCorrect = userOptions.length === correctOptions.length &&
                     userOptions.every((opt, index) => opt === correctOptions[index]);
        }
        break;
      default:
        isCorrect = userAnswer && question.correctAnswer && 
                   userAnswer.toLowerCase().trim() === question.correctAnswer.toLowerCase().trim();
    }

    return isCorrect;
  }, [questions]);

    const handleAnswerSelect = (answer: string) => {
      if (isQuizCompleted || isSubmitting) return;
      setSelectedAnswer(answer);
    };

  // Enhanced completion logic with proper database updates
const handleNextQuestion = useCallback(async () => {
  if (!currentQuestion || isQuizCompleted || isSubmitting) return;

  setIsSubmitting(true);
  
  try {
    // Use the selectedAnswer from state, which is updated by QuizQuestion's onAnswer
    const userAnswer = selectedAnswer; 
    const isCorrect = calculateScore(currentQuestion.id, userAnswer);
    
    let newScore = score;
    let newCorrectAnswers = correctAnswers;
    
    if (isCorrect) {
      newScore += 1;
      newCorrectAnswers += 1;
    } else if (userAnswer && competition.quiz_preferences?.negativeMarking) {
      newScore += competition.quiz_preferences.negativeMarks || 0;
    }
    
    setScore(Math.max(0, newScore));
    setCorrectAnswers(newCorrectAnswers);

    // Update progress in real-time
    const timeTaken = Math.floor((Date.now() - startTime) / 1000);
    const updatedAnswers = { ...answers, [currentQuestion.id]: userAnswer };
    
    await updateParticipantProgress(
      competition.id,
      updatedAnswers,
      Math.max(0, newScore),
      newCorrectAnswers,
      timeTaken,
      currentQuestionIndex + 1
    );

    if (isLastQuestion) {
      console.log('Quiz completed, finishing...');
      setIsQuizCompleted(true);
      
      await handleCompetitionCompletion(Math.max(0, newScore), newCorrectAnswers, timeTaken, updatedAnswers);
      
      setTimeout(() => {
        onComplete();
      }, 1000);
    } else {
      setCurrentQuestionIndex(prev => prev + 1);
      setSelectedAnswer(''); // Clear selected answer for next question
    }
  } catch (error) {
    console.error('Error handling next question:', error);
  } finally {
    setIsSubmitting(false);
  }
}, [
  currentQuestion, 
  selectedAnswer, // Now depends on selectedAnswer
  score, 
  correctAnswers, 
  isLastQuestion, 
  calculateScore,
  competition.id,
  startTime,
  updateParticipantProgress,
  onComplete,
  isQuizCompleted,
  isSubmitting,
  answers // Include answers in dependency array
]);

  // New function to handle competition completion with proper database updates
const handleCompetitionCompletion = async (finalScore: number, correctAnswers: number, timeTaken: number, answers: Record<number, string>) => {
  try {
    console.log('Attempting to complete competition with:', {
      competitionId: competition.id,
      userId: user?.id,
      finalScore,
      correctAnswers,
      timeTaken,
      answers
    });

    const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/competition-completion`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
      },
      body: JSON.stringify({
        competitionId: competition.id,
        userId: user?.id,
        finalScore,
        correctAnswers,
        timeTaken,
        answers
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('API Error Response:', {
        status: response.status,
        statusText: response.statusText,
        errorData
      });
      throw new Error(errorData.error || 'Failed to complete competition');
    }

    const result = await response.json();
    console.log('Competition completion result:', result);
    
    return result;
  } catch (error) {
    console.error('Detailed competition completion error:', error);
    // Fallback to original method
    try {
      await completeCompetition(competition.id);
    } catch (fallbackError) {
      console.error('Fallback method also failed:', fallbackError);
      throw fallbackError;
    }
  }
};

  const handleLeaveQuiz = async () => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      await leaveCompetition(competition.id);
      if (onLeave) {
        onLeave();
      }
    } catch (error) {
      console.error('Error leaving competition:', error);
    } finally {
      setIsSubmitting(false);
      setShowLeaveConfirm(false);
    }
  };

  const handleSendMessage = async () => {
    if (chatMessage.trim() && user) {
      await sendChatMessage(competition.id, chatMessage.trim());
      setChatMessage('');
    }
  };

  const playQuestionAudio = () => {
    if (!currentQuestion) return;
    
    if (isSpeaking) {
      speechService.stop();
      setIsSpeaking(false);
    } else {
      speechService.speak(currentQuestion.text, competition.quiz_preferences?.language || 'English');
      setIsSpeaking(true);
      
      const checkSpeakingInterval = setInterval(() => {
        if (!speechService.isSpeaking()) {
          setIsSpeaking(false);
          clearInterval(checkSpeakingInterval);
        }
      }, 100);
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const getProgressPercentage = (participant: any) => {
    const questionsAnswered = participant.questions_answered || 0;
    return (questionsAnswered / questions.length) * 100;
  };

  // Show error if no questions available
  if (!questions.length) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center text-white"
        >
          <XCircle className="w-16 h-16 mx-auto mb-4 text-red-400" />
          <h2 className="text-2xl font-bold mb-2">No Questions Available</h2>
          <p className="text-white/80">Questions are being prepared for this competition.</p>
          <Button
            onClick={onLeave}
            variant="outline"
            className="mt-6 border-white text-white hover:bg-white hover:text-gray-800"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Lobby
          </Button>
        </motion.div>
      </div>
    );
  }

  // Show completion message if quiz is completed
  if (isQuizCompleted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center text-white"
        >
          <Trophy className="w-16 h-16 mx-auto mb-4 text-yellow-400" />
          <h2 className="text-2xl font-bold mb-2">Quiz Completed!</h2>
          <p className="text-white/80">Processing results and updating rankings...</p>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white">
      {/* Header with live stats */}
      <div className="bg-black bg-opacity-30 backdrop-blur-sm border-b border-white border-opacity-20">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-6">
              <div className="flex items-center space-x-2">
                <Trophy className="w-6 h-6 text-yellow-400" />
                <span className="text-xl font-bold text-white">{competition.title}</span>
                {isCreator && (
                  <span className="px-2 py-1 bg-yellow-500 text-yellow-900 text-xs font-bold rounded-full">
                    CREATOR
                  </span>
                )}
              </div>
              <div className="flex items-center space-x-2">
                <Target className="w-5 h-5 text-blue-400" />
                <span className="text-white">Question {currentQuestionIndex + 1}/{questions.length}</span>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              {competition.quiz_preferences?.timeLimitEnabled && (
                <div className={`flex items-center space-x-2 px-3 py-2 rounded-lg ${
                  timeLeft <= 10 ? 'bg-red-500 bg-opacity-30' : 'bg-white bg-opacity-20'
                }`}>
                  <Clock className={`w-5 h-5 ${timeLeft <= 10 ? 'text-red-300' : 'text-white'}`} />
                  <span className={`font-mono text-lg font-bold ${
                    timeLeft <= 10 ? 'text-red-300' : 'text-white'
                  }`}>
                    {formatTime(timeLeft)}
                  </span>
                </div>
              )}
              <div className="flex items-center space-x-2 bg-white bg-opacity-20 px-3 py-2 rounded-lg">
                <Timer className="w-5 h-5 text-cyan-400" />
                <span className="font-mono text-lg font-bold text-white">{formatTime(totalTimeElapsed)}</span>
              </div>
              <div className="flex items-center space-x-2 bg-white bg-opacity-20 px-3 py-2 rounded-lg">
                <Zap className="w-5 h-5 text-green-400" />
                <span className="font-bold text-white">{score.toFixed(1)} pts</span>
              </div>
              <button
                onClick={() => setShowLeaderboard(!showLeaderboard)}
                className="flex items-center space-x-2 px-3 py-2 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 transition-all text-white"
              >
                {showLeaderboard ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                <span className="text-sm">Leaderboard</span>
              </button>
              <button
                onClick={() => setShowChat(!showChat)}
                className="flex items-center space-x-2 px-3 py-2 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 transition-all text-white"
              >
                <MessageCircle className="w-4 h-4" />
                <span className="text-sm">Chat</span>
              </button>
              <button
                onClick={() => setShowLeaveConfirm(true)}
                disabled={isSubmitting}
                className={`flex items-center space-x-2 px-3 py-2 rounded-lg bg-red-500 bg-opacity-30 hover:bg-opacity-50 transition-all text-red-200 hover:text-white ${
                  isSubmitting ? 'opacity-50 cursor-not-allowed' : ''
                }`}
              >
                <LogOut className="w-4 h-4" />
                <span className="text-sm">Leave</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className={`grid gap-8 ${showLeaderboard ? 'grid-cols-1 lg:grid-cols-4' : 'grid-cols-1'}`}>
          {/* Main Quiz Area */}
<div className={showLeaderboard ? 'lg:col-span-3' : 'max-w-4xl mx-auto w-full'}>
  <QuizQuestion
    question={currentQuestion}
    questionNumber={currentQuestionIndex + 1}
    totalQuestions={questions.length}
    userAnswer={answers[currentQuestion?.id]}
    onAnswer={handleAnswerSelect}
    onPrevious={() => { /* Competition quiz does not allow previous question */ }}
    onNext={handleNextQuestion}
    isLastQuestion={isLastQuestion}
    onFinish={handleNextQuestion} // handleNextQuestion will check if it's last question
    language={competition.quiz_preferences?.language || 'English'}
    timeLimitEnabled={competition.quiz_preferences?.timeLimitEnabled || false}
    timeLimit={competition.quiz_preferences?.timeLimit}
    totalTimeLimit={competition.quiz_preferences?.totalTimeLimit}
    totalTimeRemaining={totalTimeElapsed} // Use totalTimeElapsed for overall timer
    mode="exam" // Competition is always exam mode
    answerMode="immediate" // Answers are recorded immediately
    showQuitButton={true} // Show quit button
    onQuitQuiz={() => setShowLeaveConfirm(true)} // Show leave confirmation
  />
</div>

          {/* Live Leaderboard */}
          <AnimatePresence>
            {showLeaderboard && (
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                className="lg:col-span-1"
              >
                <Card className="bg-white bg-opacity-98 backdrop-blur-sm border-0 shadow-2xl h-fit sticky top-4">
                  <CardBody className="p-6">
                    <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                      <Users className="w-5 h-5 mr-2 text-purple-600" />
                      Live Rankings ({joinedParticipants.length})
                    </h3>
                    
                    <div className="space-y-3 max-h-96 overflow-y-auto">
                      {joinedParticipants.map((participant, index) => (
                        <motion.div
                          key={participant.id}
                          initial={{ opacity: 0, x: 20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.1 }}
                          className={`p-3 rounded-lg border-2 ${
                            participant.user_id === user?.id
                              ? 'border-purple-500 bg-purple-50'
                              : 'border-gray-200 bg-white'
                          }`}
                        >
                          <div className="flex items-center space-x-3">
                            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${
                              index === 0 ? 'bg-yellow-500' :
                              index === 1 ? 'bg-gray-400' :
                              index === 2 ? 'bg-orange-500' :
                              'bg-gray-300'
                            }`}>
                              {index === 0 ? <Crown className="w-4 h-4" /> : index + 1}
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="font-medium text-gray-800 truncate">
                                {participant.profile?.full_name || 'Anonymous'}
                                {participant.user_id === user?.id && ' (You)'}
                                {participant.user_id === competition.creator_id && ' (Creator)'}
                              </p>
                              <div className="flex items-center space-x-2 text-xs text-gray-600">
                                <span>{participant.score?.toFixed(1) || 0} pts</span>
                                <span>•</span>
                                <span>{participant.correct_answers || 0}/{questions.length}</span>
                                <span>•</span>
                                <span>{formatTime(participant.time_taken || 0)}</span>
                              </div>
                              
                              {/* Progress bar */}
                              <div className="mt-2">
                                <div className="w-full bg-gray-200 rounded-full h-1">
                                  <div 
                                    className="bg-gradient-to-r from-purple-500 to-indigo-500 h-1 rounded-full transition-all duration-300"
                                    style={{ width: `${getProgressPercentage(participant)}%` }}
                                  />
                                </div>
                                <div className="text-xs text-gray-500 mt-1">
                                  {participant.questions_answered || 0}/{questions.length} answered
                                  {participant.status === 'completed' && (
                                    <span className="ml-2 text-green-600 font-medium">✓ Completed</span>
                                  )}
                                </div>
                              </div>
                            </div>
                            
                            {/* Online indicator */}
                            <div className="flex flex-col items-center space-y-1">
                              <div className={`w-2 h-2 rounded-full ${
                                participant.is_online ? 'bg-green-400 animate-pulse' : 'bg-gray-400'
                              }`} />
                              <Activity className="w-3 h-3 text-gray-400" />
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    {/* Your Progress Summary */}
                    <div className="mt-6 p-4 bg-gradient-to-r from-purple-50 to-indigo-50 rounded-lg border border-purple-200">
                      <h4 className="font-semibold text-purple-800 mb-3 flex items-center">
                        <Star className="w-4 h-4 mr-2" />
                        Your Progress
                      </h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Correct:</span>
                          <span className="font-medium text-gray-800">{correctAnswers}/{questions.length}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Score:</span>
                          <span className="font-medium text-gray-800">{score.toFixed(1)} pts</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Time:</span>
                          <span className="font-medium text-gray-800">{formatTime(totalTimeElapsed)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Rank:</span>
                          <span className="font-medium text-gray-800">
                            {joinedParticipants.findIndex(p => p.user_id === user?.id) + 1}/{joinedParticipants.length}
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardBody>
                </Card>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Chat Panel */}
        <AnimatePresence>
          {showChat && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="mt-8"
            >
              <Card className="bg-white bg-opacity-98 backdrop-blur-sm border-0 shadow-2xl">
                <CardBody className="p-0">
                  <div className="h-60 overflow-y-auto p-4 space-y-3 bg-gradient-to-br from-slate-50 to-indigo-50">
                    {chatMessages.length === 0 ? (
                      <div className="text-center text-slate-500 py-8">
                        <MessageCircle className="w-8 h-8 mx-auto mb-2 opacity-50" />
                        <p className="text-sm">No messages yet</p>
                      </div>
                    ) : (
                      chatMessages.map((message) => (
                        <motion.div
                          key={message.id}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          className={`flex ${message.user_id === user?.id ? 'justify-end' : 'justify-start'}`}
                        >
                          <div
                            className={`max-w-xs px-3 py-2 rounded-lg text-sm ${
                              message.user_id === user?.id
                                ? 'bg-gradient-to-r from-purple-500 to-indigo-500 text-white'
                                : 'bg-white text-slate-800 border border-slate-200'
                            }`}
                          >
                            <p className="text-xs font-medium mb-1 opacity-75">
                              {message.profile?.full_name || 'Anonymous'}
                            </p>
                            <p>{message.message}</p>
                          </div>
                        </motion.div>
                      ))
                    )}
                  </div>
                  <div className="p-4 border-t border-slate-200 bg-white">
                    <div className="flex space-x-2">
                      <input
                        type="text"
                        value={chatMessage}
                        onChange={(e) => setChatMessage(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                        placeholder="Type a message..."
                        className="flex-1 px-3 py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-sm text-gray-800"
                      />
                      <Button
                        onClick={handleSendMessage}
                        disabled={!chatMessage.trim()}
                        size="sm"
                        className="bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600"
                      >
                        <Send className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </CardBody>
              </Card>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Leave Confirmation Modal */}
      <AnimatePresence>
        {showLeaveConfirm && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-xl p-6 max-w-md mx-4 shadow-2xl"
            >
              <div className="flex items-center mb-4">
                <AlertTriangle className="w-6 h-6 text-red-500 mr-3" />
                <h3 className="text-lg font-bold text-gray-800">Leave Competition?</h3>
              </div>
              <p className="text-gray-600 mb-6">
                Are you sure you want to leave this competition? Your progress will be lost and you won't be able to rejoin.
                {isCreator && (
                  <span className="block mt-2 text-orange-600 font-medium">
                    As the creator, leaving will end the competition for all participants.
                  </span>
                )}
              </p>
              <div className="flex space-x-3">
                <Button
                  onClick={() => setShowLeaveConfirm(false)}
                  variant="outline"
                  className="flex-1"
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleLeaveQuiz}
                  disabled={isSubmitting}
                  className="flex-1 bg-red-500 hover:bg-red-600 text-white"
                >
                  {isSubmitting ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                      Leaving...
                    </>
                  ) : (
                    <>
                      <LogOut className="w-4 h-4 mr-2" />
                      Leave
                    </>
                  )}
                </Button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default CompetitionQuiz;