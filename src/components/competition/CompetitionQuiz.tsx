import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useCompetitionStore } from '../../store/useCompetitionStore';
import { useAuthStore } from '../../store/useAuthStore';
import { Button } from '../ui/Button';
import { Card, CardBody } from '../ui/Card';
import { 
  Clock, Users, Trophy, Target, Zap, 
  CheckCircle, ArrowRight, Crown, Timer,
  Activity, Star, Award, TrendingUp,
  Brain, Eye, EyeOff, XCircle, MessageCircle,
  Send, Sparkles, Volume2, VolumeX, ArrowLeft,
  LogOut, AlertTriangle, Play, Pause, SkipForward,
  Flag, Lightbulb, HelpCircle, BookOpen, Shield
} from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Competition } from '../../types/competition';
import { Question } from '../../types';
import { speechService } from '../../services/speech';
import { supabase } from '../../services/supabase';

interface CompetitionQuizProps {
  competition: Competition;
  onComplete: () => void;
  onLeave?: () => void;
}

const CompetitionQuiz: React.FC<CompetitionQuizProps> = ({
  competition,
  onComplete,
  onLeave
}) => {
  const { user } = useAuthStore();
  const { 
    participants, 
    updateParticipantProgress,
    completeCompetition,
    subscribeToCompetition,
    getLiveLeaderboard,
    chatMessages,
    loadChatMessages,
    sendChatMessage,
    subscribeToChat,
    loadParticipants,
    leaveCompetition
  } = useCompetitionStore();

  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [timeLeft, setTimeLeft] = useState<number>(
    parseInt(competition.quiz_preferences?.timeLimit || '30')
  );
  const [totalTimeElapsed, setTotalTimeElapsed] = useState(0);
  const [score, setScore] = useState(0);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [startTime] = useState(Date.now());
  const [questionStartTime, setQuestionStartTime] = useState(Date.now());
  const [showLeaderboard, setShowLeaderboard] = useState(true);
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [showChat, setShowChat] = useState(false);
  const [chatMessage, setChatMessage] = useState('');
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isQuizCompleted, setIsQuizCompleted] = useState(false);
  const [showLeaveConfirm, setShowLeaveConfirm] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showHint, setShowHint] = useState(false);
  const [confidence, setConfidence] = useState<number>(50);
  const [flaggedForReview, setFlaggedForReview] = useState<Set<number>>(new Set());

  // Refs for better performance
  const submitTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const progressUpdateRef = useRef<NodeJS.Timeout | null>(null);

  // Get questions from competition object (pre-generated by creator)
  const questions: Question[] = competition.questions || [];
  const currentQuestion = questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === questions.length - 1;
  const joinedParticipants = participants.filter(p => p.status === 'joined' || p.status === 'completed');
  const leaderboard = getLiveLeaderboard(competition.id);
  const isCreator = user?.id === competition.creator_id;

  // Load participants and set up subscriptions
  useEffect(() => {
    if (competition.id) {
      console.log('Setting up quiz subscriptions for competition:', competition.id);
      loadParticipants(competition.id);
      const unsubscribe = subscribeToCompetition(competition.id);
      const unsubscribeChat = subscribeToChat(competition.id);
      loadChatMessages(competition.id);
      
      return () => {
        console.log('Cleaning up quiz subscriptions');
        unsubscribe();
        unsubscribeChat();
      };
    }
  }, [competition.id, loadParticipants, subscribeToCompetition, subscribeToChat, loadChatMessages]);

  // Refresh participants periodically with debouncing
  useEffect(() => {
    const interval = setInterval(() => {
      if (!isQuizCompleted && !progressUpdateRef.current) {
        progressUpdateRef.current = setTimeout(() => {
          loadParticipants(competition.id);
          progressUpdateRef.current = null;
        }, 100);
      }
    }, 3000);

    return () => {
      clearInterval(interval);
      if (progressUpdateRef.current) {
        clearTimeout(progressUpdateRef.current);
      }
    };
  }, [competition.id, loadParticipants, isQuizCompleted]);

  useEffect(() => {
    setQuestionStartTime(Date.now());
    setTimeLeft(parseInt(competition.quiz_preferences?.timeLimit || '30'));
    setSelectedAnswer(answers[currentQuestion?.id] || '');
    setConfidence(50);
  }, [currentQuestionIndex, currentQuestion]);

  // Per-question timer
  useEffect(() => {
    if (timeLeft > 0 && questions.length > 0 && competition.quiz_preferences?.timeLimitEnabled && !isQuizCompleted) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && questions.length > 0 && competition.quiz_preferences?.timeLimitEnabled && !isQuizCompleted) {
      handleNextQuestion();
    }
  }, [timeLeft, questions.length, isQuizCompleted]);

  // Total time elapsed timer
  useEffect(() => {
    if (questions.length > 0 && !isQuizCompleted) {
      const timer = setInterval(() => {
        setTotalTimeElapsed(Math.floor((Date.now() - startTime) / 1000));
      }, 1000);
      return () => clearInterval(timer);
    }
  }, [startTime, questions.length, isQuizCompleted]);

  const calculateScore = useCallback((questionId: number, userAnswer: string) => {
    const question = questions.find(q => q.id === questionId);
    if (!question) return false;

    let isCorrect = false;
    
    switch (question.type) {
      case 'multiple-choice':
      case 'true-false':
        isCorrect = userAnswer && question.correctAnswer && 
                   userAnswer.toLowerCase() === question.correctAnswer.toLowerCase();
        break;
      case 'multi-select':
        if (userAnswer && question.correctOptions) {
          const userOptions = userAnswer.split(',').sort();
          const correctOptions = question.correctOptions.sort();
          isCorrect = userOptions.length === correctOptions.length &&
                     userOptions.every((opt, index) => opt === correctOptions[index]);
        }
        break;
      default:
        isCorrect = userAnswer && question.correctAnswer && 
                   userAnswer.toLowerCase().trim() === question.correctAnswer.toLowerCase().trim();
    }

    return isCorrect;
  }, [questions]);

  const handleAnswerSelect = (answer: string) => {
    if (isQuizCompleted || isSubmitting) return;
    setSelectedAnswer(answer);
    setAnswers(prev => ({
      ...prev,
      [currentQuestion.id]: answer
    }));
  };

  const handleConfidenceChange = (value: number) => {
    setConfidence(value);
  };

  const handleFlagQuestion = () => {
    setFlaggedForReview(prev => {
      const newSet = new Set(prev);
      if (newSet.has(currentQuestion.id)) {
        newSet.delete(currentQuestion.id);
      } else {
        newSet.add(currentQuestion.id);
      }
      return newSet;
    });
  };

  // Enhanced completion logic with better error handling and debouncing
  const handleNextQuestion = useCallback(async () => {
    if (!currentQuestion || isQuizCompleted || isSubmitting) return;

    // Prevent multiple simultaneous submissions
    if (submitTimeoutRef.current) {
      clearTimeout(submitTimeoutRef.current);
    }

    setIsSubmitting(true);
    
    try {
      const userAnswer = answers[currentQuestion.id] || selectedAnswer;
      const isCorrect = calculateScore(currentQuestion.id, userAnswer);
      
      let newScore = score;
      let newCorrectAnswers = correctAnswers;
      
      if (isCorrect) {
        newScore += 1;
        newCorrectAnswers += 1;
      } else if (userAnswer && competition.quiz_preferences?.negativeMarking) {
        newScore += competition.quiz_preferences.negativeMarks || 0;
      }
      
      setScore(Math.max(0, newScore));
      setCorrectAnswers(newCorrectAnswers);

      // Debounced progress update
      submitTimeoutRef.current = setTimeout(async () => {
        try {
          const timeTaken = Math.floor((Date.now() - startTime) / 1000);
          const updatedAnswers = { ...answers, [currentQuestion.id]: userAnswer };
          
          await updateParticipantProgress(
            competition.id,
            updatedAnswers,
            Math.max(0, newScore),
            newCorrectAnswers,
            timeTaken,
            currentQuestionIndex + 1
          );

          if (isLastQuestion) {
            console.log('Quiz completed, finishing...');
            setIsQuizCompleted(true);
            
            await handleCompetitionCompletion(Math.max(0, newScore), newCorrectAnswers, timeTaken, updatedAnswers);
            
            setTimeout(() => {
              onComplete();
            }, 1000);
          } else {
            setCurrentQuestionIndex(prev => prev + 1);
          }
        } catch (error) {
          console.error('Error updating progress:', error);
          // Retry once after a delay
          setTimeout(() => {
            updateParticipantProgress(
              competition.id,
              { ...answers, [currentQuestion.id]: userAnswer },
              Math.max(0, newScore),
              newCorrectAnswers,
              Math.floor((Date.now() - startTime) / 1000),
              currentQuestionIndex + 1
            ).catch(console.error);
          }, 1000);
        } finally {
          setIsSubmitting(false);
        }
      }, 300); // 300ms debounce
    } catch (error) {
      console.error('Error handling next question:', error);
      setIsSubmitting(false);
    }
  }, [
    currentQuestion, 
    answers, 
    selectedAnswer,
    score, 
    correctAnswers, 
    isLastQuestion, 
    calculateScore,
    competition.id,
    startTime,
    updateParticipantProgress,
    onComplete,
    isQuizCompleted,
    isSubmitting
  ]);

  // Competition completion with retry logic
  const handleCompetitionCompletion = async (finalScore: number, correctAnswers: number, timeTaken: number, answers: Record<number, string>) => {
    try {
      const response = await fetch(`${import.meta.env.VITE_SUPABASE_URL}/functions/v1/competition-completion`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_SUPABASE_ANON_KEY}`,
        },
        body: JSON.stringify({
          competitionId: competition.id,
          userId: user?.id,
          finalScore,
          correctAnswers,
          timeTaken,
          answers
        })
      });

      if (!response.ok) {
        throw new Error('Failed to complete competition');
      }

      const result = await response.json();
      console.log('Competition completion result:', result);
      
      return result;
    } catch (error) {
      console.error('Error completing competition:', error);
      // Fallback to original method
      await completeCompetition(competition.id);
    }
  };

  const handleLeaveQuiz = async () => {
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    try {
      await leaveCompetition(competition.id);
      if (onLeave) {
        onLeave();
      }
    } catch (error) {
      console.error('Error leaving competition:', error);
    } finally {
      setIsSubmitting(false);
      setShowLeaveConfirm(false);
    }
  };

  const handleSendMessage = async () => {
    if (chatMessage.trim() && user) {
      await sendChatMessage(competition.id, chatMessage.trim());
      setChatMessage('');
    }
  };

  const playQuestionAudio = () => {
    if (!currentQuestion) return;
    
    if (isSpeaking) {
      speechService.stop();
      setIsSpeaking(false);
    } else {
      speechService.speak(currentQuestion.text, competition.quiz_preferences?.language || 'English');
      setIsSpeaking(true);
      
      const checkSpeakingInterval = setInterval(() => {
        if (!speechService.isSpeaking()) {
          setIsSpeaking(false);
          clearInterval(checkSpeakingInterval);
        }
      }, 100);
    }
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  const getProgressPercentage = (participant: any) => {
    const questionsAnswered = participant.questions_answered || 0;
    return (questionsAnswered / questions.length) * 100;
  };

  const renderQuestionContent = () => {
    if (!currentQuestion) return null;

    switch (currentQuestion.type) {
      case 'multiple-choice':
        return (
          <div className="space-y-3 sm:space-y-4 mt-6 sm:mt-8">
            {currentQuestion.options?.map((option, index) => (
              <motion.button
                key={index}
                onClick={() => handleAnswerSelect(option)}
                disabled={isSubmitting}
                className={`w-full p-3 sm:p-4 text-left rounded-xl border-2 transition-all duration-300 ${
                  selectedAnswer === option
                    ? 'border-purple-500 bg-purple-50 shadow-lg scale-[1.02] ring-4 ring-purple-200'
                    : 'border-gray-300 bg-white hover:border-purple-300 hover:bg-purple-50 hover:shadow-md hover:scale-[1.01]'
                } ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
                whileHover={{ scale: selectedAnswer === option ? 1.02 : 1.01 }}
                whileTap={{ scale: 0.98 }}
              >
                <div className="flex items-center space-x-3">
                  <div className={`w-5 h-5 sm:w-6 sm:h-6 rounded-full border-2 flex items-center justify-center flex-shrink-0 ${
                    selectedAnswer === option
                      ? 'border-purple-600 bg-purple-600 shadow-lg'
                      : 'border-gray-400'
                  }`}>
                    {selectedAnswer === option && (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        transition={{ type: "spring", stiffness: 500, damping: 30 }}
                      >
                        <CheckCircle className="w-3 h-3 sm:w-4 sm:h-4 text-white" />
                      </motion.div>
                    )}
                  </div>
                  <span className="font-medium text-sm sm:text-base lg:text-lg text-gray-800 flex-1">{option}</span>
                </div>
              </motion.button>
            ))}
          </div>
        );

      case 'true-false':
        return (
          <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 mt-6 sm:mt-8">
            {['True', 'False'].map((option) => (
              <motion.button
                key={option}
                onClick={() => handleAnswerSelect(option)}
                disabled={isSubmitting}
                className={`flex-1 py-4 sm:py-6 px-6 sm:px-8 rounded-xl font-bold text-base sm:text-lg transition-all duration-300 ${
                  selectedAnswer === option
                    ? 'bg-gradient-to-r from-purple-600 to-indigo-600 text-white shadow-xl scale-105 ring-4 ring-purple-300'
                    : 'bg-white text-gray-700 border-2 border-gray-300 hover:bg-purple-100 hover:text-purple-700 hover:border-purple-300 hover:shadow-lg hover:scale-102'
                } ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
                whileHover={{ scale: selectedAnswer === option ? 1.05 : 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                {option}
              </motion.button>
            ))}
          </div>
        );

      default:
        return (
          <input
            type="text"
            placeholder="Type your answer..."
            value={selectedAnswer}
            onChange={(e) => handleAnswerSelect(e.target.value)}
            disabled={isSubmitting}
            className={`w-full p-3 sm:p-4 text-base sm:text-xl border-2 border-gray-300 rounded-xl focus:border-purple-500 focus:outline-none mt-6 sm:mt-8 bg-white text-gray-800 ${
              isSubmitting ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          />
        );
    }
  };

  // Show error if no questions available
  if (!questions.length) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center text-white max-w-md"
        >
          <XCircle className="w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-4 text-red-400" />
          <h2 className="text-xl sm:text-2xl font-bold mb-2">No Questions Available</h2>
          <p className="text-white/80 text-sm sm:text-base">Questions are being prepared for this competition.</p>
          <Button
            onClick={onLeave}
            variant="outline"
            className="mt-6 border-white text-white hover:bg-white hover:text-gray-800"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Lobby
          </Button>
        </motion.div>
      </div>
    );
  }

  // Show completion message if quiz is completed
  if (isQuizCompleted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center text-white max-w-md"
        >
          <Trophy className="w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-4 text-yellow-400" />
          <h2 className="text-xl sm:text-2xl font-bold mb-2">Quiz Completed!</h2>
          <p className="text-white/80 text-sm sm:text-base">Processing results and updating rankings...</p>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 text-white">
      {/* Enhanced Header with better mobile layout */}
      <div className="bg-black bg-opacity-30 backdrop-blur-sm border-b border-white border-opacity-20">
        <div className="max-w-7xl mx-auto px-2 sm:px-4 py-3 sm:py-4">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0">
            {/* Competition Info */}
            <div className="flex items-center space-x-2 sm:space-x-4 min-w-0">
              <div className="flex items-center space-x-2 min-w-0">
                <Trophy className="w-4 h-4 sm:w-6 sm:h-6 text-yellow-400 flex-shrink-0" />
                <span className="text-sm sm:text-xl font-bold text-white truncate">{competition.title}</span>
                {isCreator && (
                  <span className="px-1 sm:px-2 py-0.5 sm:py-1 bg-yellow-500 text-yellow-900 text-xs font-bold rounded-full flex-shrink-0">
                    CREATOR
                  </span>
                )}
              </div>
              <div className="flex items-center space-x-1 sm:space-x-2 text-xs sm:text-base">
                <Target className="w-3 h-3 sm:w-5 sm:h-5 text-blue-400 flex-shrink-0" />
                <span className="text-white">{currentQuestionIndex + 1}/{questions.length}</span>
              </div>
            </div>
            
            {/* Stats and Controls */}
            <div className="flex items-center justify-between sm:justify-end space-x-2 sm:space-x-4">
              {/* Timer */}
              {competition.quiz_preferences?.timeLimitEnabled && (
                <div className={`flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-1 sm:py-2 rounded-lg ${
                  timeLeft <= 10 ? 'bg-red-500 bg-opacity-30' : 'bg-white bg-opacity-20'
                }`}>
                  <Clock className={`w-3 h-3 sm:w-5 sm:h-5 ${timeLeft <= 10 ? 'text-red-300' : 'text-white'} flex-shrink-0`} />
                  <span className={`font-mono text-xs sm:text-lg font-bold ${
                    timeLeft <= 10 ? 'text-red-300' : 'text-white'
                  }`}>
                    {formatTime(timeLeft)}
                  </span>
                </div>
              )}
              
              {/* Score */}
              <div className="flex items-center space-x-1 sm:space-x-2 bg-white bg-opacity-20 px-2 sm:px-3 py-1 sm:py-2 rounded-lg">
                <Zap className="w-3 h-3 sm:w-5 sm:h-5 text-green-400 flex-shrink-0" />
                <span className="font-bold text-white text-xs sm:text-base">{score.toFixed(1)}</span>
              </div>
              
              {/* Controls */}
              <div className="flex items-center space-x-1 sm:space-x-2">
                <button
                  onClick={() => setShowLeaderboard(!showLeaderboard)}
                  className="p-1 sm:p-2 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 transition-all text-white"
                >
                  {showLeaderboard ? <EyeOff className="w-3 h-3 sm:w-4 sm:h-4" /> : <Eye className="w-3 h-3 sm:w-4 sm:h-4" />}
                </button>
                <button
                  onClick={() => setShowChat(!showChat)}
                  className="p-1 sm:p-2 rounded-lg bg-white bg-opacity-20 hover:bg-opacity-30 transition-all text-white"
                >
                  <MessageCircle className="w-3 h-3 sm:w-4 sm:h-4" />
                </button>
                <button
                  onClick={() => setShowLeaveConfirm(true)}
                  disabled={isSubmitting}
                  className={`p-1 sm:p-2 rounded-lg bg-red-500 bg-opacity-30 hover:bg-opacity-50 transition-all text-red-200 hover:text-white ${
                    isSubmitting ? 'opacity-50 cursor-not-allowed' : ''
                  }`}
                >
                  <LogOut className="w-3 h-3 sm:w-4 sm:h-4" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-2 sm:px-4 py-4 sm:py-8">
        <div className={`grid gap-4 sm:gap-8 ${showLeaderboard ? 'grid-cols-1 lg:grid-cols-4' : 'grid-cols-1'}`}>
          {/* Enhanced Main Quiz Area */}
          <div className={showLeaderboard ? 'lg:col-span-3' : 'max-w-4xl mx-auto w-full'}>
            <Card className="bg-white bg-opacity-98 backdrop-blur-sm border-0 shadow-2xl">
              <CardBody className="p-4 sm:p-6 lg:p-8">
                {/* Question Header */}
                <div className="mb-6 sm:mb-8">
                  <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 space-y-2 sm:space-y-0">
                    <div className="flex items-center space-x-2 sm:space-x-3">
                      <span className="text-xs sm:text-sm font-medium text-purple-700 bg-purple-100 px-2 sm:px-3 py-1 rounded-full">
                        {currentQuestion?.difficulty || 'medium'} • {currentQuestion?.type || 'multiple-choice'}
                      </span>
                      {flaggedForReview.has(currentQuestion.id) && (
                        <span className="text-xs sm:text-sm font-medium text-orange-700 bg-orange-100 px-2 sm:px-3 py-1 rounded-full flex items-center">
                          <Flag className="w-3 h-3 mr-1" />
                          Flagged
                        </span>
                      )}
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <button
                        onClick={handleFlagQuestion}
                        className={`p-2 rounded-full transition-all duration-300 ${
                          flaggedForReview.has(currentQuestion.id)
                            ? 'bg-orange-500 text-white shadow-lg' 
                            : 'bg-gray-100 text-gray-600 hover:bg-orange-100 hover:text-orange-600'
                        }`}
                      >
                        <Flag className="w-4 h-4 sm:w-5 sm:h-5" />
                      </button>
                      <button
                        onClick={() => setShowHint(!showHint)}
                        className={`p-2 rounded-full transition-all duration-300 ${
                          showHint
                            ? 'bg-blue-500 text-white shadow-lg' 
                            : 'bg-gray-100 text-gray-600 hover:bg-blue-100 hover:text-blue-600'
                        }`}
                      >
                        <Lightbulb className="w-4 h-4 sm:w-5 sm:h-5" />
                      </button>
                      <button
                        onClick={playQuestionAudio}
                        className={`p-2 rounded-full transition-all duration-300 ${
                          isSpeaking 
                            ? 'bg-purple-500 text-white shadow-lg scale-110' 
                            : 'bg-gray-100 text-gray-600 hover:bg-purple-100 hover:text-purple-600 hover:scale-105'
                        }`}
                      >
                        {isSpeaking ? <VolumeX className="w-4 h-4 sm:w-5 sm:h-5" /> : <Volume2 className="w-4 h-4 sm:w-5 sm:h-5" />}
                      </button>
                    </div>
                  </div>
                  
                  {/* Progress Bar */}
                  <div className="w-full bg-gray-200 rounded-full h-2 sm:h-3 mb-4 sm:mb-6">
                    <motion.div
                      className="bg-gradient-to-r from-purple-500 to-indigo-500 h-2 sm:h-3 rounded-full"
                      initial={{ width: 0 }}
                      animate={{ width: `${((currentQuestionIndex + 1) / questions.length) * 100}%` }}
                      transition={{ duration: 0.5 }}
                    />
                  </div>
                  
                  <h2 className="text-lg sm:text-xl lg:text-2xl font-bold text-gray-800 mb-4 sm:mb-6 leading-relaxed">
                    {currentQuestion?.text || 'Loading question...'}
                  </h2>
                  
                  {/* Hint Section */}
                  <AnimatePresence>
                    {showHint && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        className="mb-4 sm:mb-6 p-3 sm:p-4 bg-blue-50 border border-blue-200 rounded-lg"
                      >
                        <div className="flex items-start space-x-2 sm:space-x-3">
                          <HelpCircle className="w-4 h-4 sm:w-5 sm:h-5 text-blue-600 mt-0.5 flex-shrink-0" />
                          <div>
                            <h4 className="font-semibold text-blue-800 text-sm sm:text-base">Hint</h4>
                            <p className="text-blue-700 text-xs sm:text-sm mt-1">
                              Take your time to read the question carefully. Consider all options before selecting your answer.
                            </p>
                          </div>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                  
                  {renderQuestionContent()}
                </div>

                {/* Confidence Slider */}
                {selectedAnswer && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mb-6 sm:mb-8 p-3 sm:p-4 bg-gradient-to-r from-indigo-50 to-purple-50 rounded-lg border border-indigo-200"
                  >
                    <h4 className="font-semibold text-indigo-800 mb-2 sm:mb-3 text-sm sm:text-base">How confident are you?</h4>
                    <div className="flex items-center space-x-3 sm:space-x-4">
                      <span className="text-xs sm:text-sm text-gray-600 flex-shrink-0">Not sure</span>
                      <input
                        type="range"
                        min="0"
                        max="100"
                        value={confidence}
                        onChange={(e) => handleConfidenceChange(parseInt(e.target.value))}
                        className="flex-1 h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                      />
                      <span className="text-xs sm:text-sm text-gray-600 flex-shrink-0">Very sure</span>
                    </div>
                    <div className="text-center mt-2">
                      <span className="text-sm sm:text-base font-semibold text-indigo-600">{confidence}% confident</span>
                    </div>
                  </motion.div>
                )}

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
                  <div className="text-xs sm:text-sm text-gray-600">
                    {competition.quiz_preferences?.timeLimitEnabled && (
                      <span>Time per question: {competition.quiz_preferences?.timeLimit}s</span>
                    )}
                  </div>
                  
                  <div className="flex space-x-2 sm:space-x-3">
                    {currentQuestionIndex > 0 && (
                      <Button
                        onClick={() => setCurrentQuestionIndex(prev => prev - 1)}
                        variant="outline"
                        disabled={isSubmitting}
                        className="px-4 sm:px-6 py-2 sm:py-3 text-sm sm:text-base"
                      >
                        <ArrowLeft className="w-4 h-4 mr-2" />
                        Previous
                      </Button>
                    )}
                    
                    <motion.div
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                      className="flex-1 sm:flex-none"
                    >
                      <Button
                        onClick={handleNextQuestion}
                        disabled={!selectedAnswer || isQuizCompleted || isSubmitting}
                        className={`bg-gradient-to-r from-purple-500 to-indigo-500 hover:opacity-90 transition-all duration-300 shadow-xl px-6 sm:px-8 py-3 sm:py-4 text-sm sm:text-lg font-bold relative overflow-hidden group w-full sm:w-auto ${
                          isSubmitting ? 'opacity-50 cursor-not-allowed' : ''
                        }`}
                      >
                        <div className="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-white/0 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-1000" />
                        <div className="relative flex items-center justify-center">
                          {isSubmitting ? (
                            <>
                              <div className="w-4 h-4 sm:w-5 sm:h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                              Submitting...
                            </>
                          ) : (
                            <>
                              {isLastQuestion ? 'Finish' : 'Next'}
                              <ArrowRight className="w-4 h-4 sm:w-5 sm:h-5 ml-2 group-hover:translate-x-1 transition-transform duration-300" />
                            </>
                          )}
                        </div>
                      </Button>
                    </motion.div>
                  </div>
                </div>
              </CardBody>
            </Card>
          </div>

          {/* Enhanced Live Leaderboard with better mobile layout */}
          <AnimatePresence>
            {showLeaderboard && (
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                className="lg:col-span-1"
              >
                <Card className="bg-white bg-opacity-98 backdrop-blur-sm border-0 shadow-2xl h-fit sticky top-4">
                  <CardBody className="p-3 sm:p-6">
                    <h3 className="text-base sm:text-lg font-bold text-gray-800 mb-3 sm:mb-4 flex items-center">
                      <Users className="w-4 h-4 sm:w-5 sm:h-5 mr-2 text-purple-600 flex-shrink-0" />
                      Live Rankings ({joinedParticipants.length})
                    </h3>
                    
                    <div className="space-y-2 sm:space-y-3 max-h-64 sm:max-h-96 overflow-y-auto">
                      {joinedParticipants.map((participant, index) => (
                        <motion.div
                          key={participant.id}
                          initial={{ opacity: 0, x: 20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.1 }}
                          className={`p-2 sm:p-3 rounded-lg border-2 ${
                            participant.user_id === user?.id
                              ? 'border-purple-500 bg-purple-50'
                              : 'border-gray-200 bg-white'
                          }`}
                        >
                          <div className="flex items-center space-x-2 sm:space-x-3">
                            <div className={`w-6 h-6 sm:w-8 sm:h-8 rounded-full flex items-center justify-center text-white font-bold text-xs sm:text-sm flex-shrink-0 ${
                              index === 0 ? 'bg-yellow-500' :
                              index === 1 ? 'bg-gray-400' :
                              index === 2 ? 'bg-orange-500' :
                              'bg-gray-300'
                            }`}>
                              {index === 0 ? <Crown className="w-3 h-3 sm:w-4 sm:h-4" /> : index + 1}
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="font-medium text-gray-800 truncate text-xs sm:text-sm">
                                {participant.profile?.full_name || 'Anonymous'}
                                {participant.user_id === user?.id && ' (You)'}
                                {participant.user_id === competition.creator_id && ' (Creator)'}
                              </p>
                              <div className="flex items-center justify-between text-xs text-gray-600 mt-1">
                                <span>{participant.score?.toFixed(1) || 0} pts</span>
                                <span>{participant.correct_answers || 0}/{questions.length}</span>
                              </div>
                              
                              {/* Progress bar */}
                              <div className="mt-1 sm:mt-2">
                                <div className="w-full bg-gray-200 rounded-full h-1">
                                  <div 
                                    className="bg-gradient-to-r from-purple-500 to-indigo-500 h-1 rounded-full transition-all duration-300"
                                    style={{ width: `${getProgressPercentage(participant)}%` }}
                                  />
                                </div>
                                <div className="text-xs text-gray-500 mt-1">
                                  {participant.questions_answered || 0}/{questions.length} answered
                                  {participant.status === 'completed' && (
                                    <span className="ml-2 text-green-600 font-medium">✓</span>
                                  )}
                                </div>
                              </div>
                            </div>
                            
                            {/* Online indicator */}
                            <div className={`w-2 h-2 rounded-full flex-shrink-0 ${
                              participant.is_online ? 'bg-green-400 animate-pulse' : 'bg-gray-400'
                            }`} />
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    {/* Your Progress Summary */}
                    <div className="mt-4 sm:mt-6 p-3 sm:p-4 bg-gradient-to-r from-purple-50 to-indigo-50 rounded-lg border border-purple-200">
                      <h4 className="font-semibold text-purple-800 mb-2 sm:mb-3 flex items-center text-sm sm:text-base">
                        <Star className="w-3 h-3 sm:w-4 sm:h-4 mr-2 flex-shrink-0" />
                        Your Progress
                      </h4>
                      <div className="space-y-1 sm:space-y-2 text-xs sm:text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Correct:</span>
                          <span className="font-medium text-gray-800">{correctAnswers}/{questions.length}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Score:</span>
                          <span className="font-medium text-gray-800">{score.toFixed(1)} pts</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Rank:</span>
                          <span className="font-medium text-gray-800">
                            {joinedParticipants.findIndex(p => p.user_id === user?.id) + 1}/{joinedParticipants.length}
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardBody>
                </Card>
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Enhanced Chat Panel with better mobile layout */}
        <AnimatePresence>
          {showChat && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="mt-4 sm:mt-8"
            >
              <Card className="bg-white bg-opacity-98 backdrop-blur-sm border-0 shadow-2xl">
                <CardBody className="p-0">
                  <div className="h-40 sm:h-60 overflow-y-auto p-3 sm:p-4 space-y-2 sm:space-y-3 bg-gradient-to-br from-slate-50 to-indigo-50">
                    {chatMessages.length === 0 ? (
                      <div className="text-center text-slate-500 py-6 sm:py-8">
                        <MessageCircle className="w-6 h-6 sm:w-8 sm:h-8 mx-auto mb-2 opacity-50" />
                        <p className="text-xs sm:text-sm">No messages yet</p>
                      </div>
                    ) : (
                      chatMessages.map((message) => (
                        <motion.div
                          key={message.id}
                          initial={{ opacity: 0, y: 10 }}
                          animate={{ opacity: 1, y: 0 }}
                          className={`flex ${message.user_id === user?.id ? 'justify-end' : 'justify-start'}`}
                        >
                          <div
                            className={`max-w-xs px-2 sm:px-3 py-1 sm:py-2 rounded-lg text-xs sm:text-sm ${
                              message.user_id === user?.id
                                ? 'bg-gradient-to-r from-purple-500 to-indigo-500 text-white'
                                : 'bg-white text-slate-800 border border-slate-200'
                            }`}
                          >
                            <p className="text-xs font-medium mb-1 opacity-75">
                              {message.profile?.full_name || 'Anonymous'}
                            </p>
                            <p>{message.message}</p>
                          </div>
                        </motion.div>
                      ))
                    )}
                  </div>
                  <div className="p-3 sm:p-4 border-t border-slate-200 bg-white">
                    <div className="flex space-x-2">
                      <input
                        type="text"
                        value={chatMessage}
                        onChange={(e) => setChatMessage(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                        placeholder="Type a message..."
                        className="flex-1 px-2 sm:px-3 py-1 sm:py-2 border border-slate-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 text-xs sm:text-sm text-gray-800"
                      />
                      <Button
                        onClick={handleSendMessage}
                        disabled={!chatMessage.trim()}
                        size="sm"
                        className="bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 px-2 sm:px-3 py-1 sm:py-2"
                      >
                        <Send className="w-3 h-3 sm:w-4 sm:h-4" />
                      </Button>
                    </div>
                  </div>
                </CardBody>
              </Card>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Leave Confirmation Modal */}
      <AnimatePresence>
        {showLeaveConfirm && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-xl p-4 sm:p-6 max-w-md mx-4 shadow-2xl w-full"
            >
              <div className="flex items-center mb-4">
                <AlertTriangle className="w-5 h-5 sm:w-6 sm:h-6 text-red-500 mr-3 flex-shrink-0" />
                <h3 className="text-base sm:text-lg font-bold text-gray-800">Leave Competition?</h3>
              </div>
              <p className="text-gray-600 mb-4 sm:mb-6 text-sm sm:text-base">
                Are you sure you want to leave this competition? Your progress will be lost and you won't be able to rejoin.
                {isCreator && (
                  <span className="block mt-2 text-orange-600 font-medium">
                    As the creator, leaving will end the competition for all participants.
                  </span>
                )}
              </p>
              <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
                <Button
                  onClick={() => setShowLeaveConfirm(false)}
                  variant="outline"
                  className="flex-1 text-sm sm:text-base"
                  disabled={isSubmitting}
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleLeaveQuiz}
                  disabled={isSubmitting}
                  className="flex-1 bg-red-500 hover:bg-red-600 text-white text-sm sm:text-base"
                >
                  {isSubmitting ? (
                    <>
                      <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                      Leaving...
                    </>
                  ) : (
                    <>
                      <LogOut className="w-4 h-4 mr-2" />
                      Leave
                    </>
                  )}
                </Button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default CompetitionQuiz;